snippet func
	function(${1}) {
		${2}
	}
# exports mechanism to handle browsers and nodejs cases
snippet export
	(function (exports) {
		${1}
		exports.${2:foo} = ${3:foo};
	}((typeof window === 'undefined') ? module.exports : window));
snippet ()
	(${1}) => {
		${2}
	}
# ES6 constructor
snippet ctor
	constructor() {
		${1}
	}
# ES6 class
snippet cls
	class ${1} {
		${2}
	}
# ES6 class extends
snippet clse
	class ${1} extends ${2} {
		${3}
	}
# ES6 class extends
snippet clsr
	class ${1} extends React.Component {
		${3}
	}
# bracket block
snippet {}
	{
		${1}
	}
# someArray.map
snippet map
	map((val) => ${1:val})
# advanced map
snippet mapp
	map((val, idx, arr) => {
		${1:val}
	})
# someArray.forEach
snippet fe
	forEach((val) => ${1:val})
# advanced forEach
snippet fee
	forEach((val, idx, arr) => {
		${1:val}
	})
snippet reduce
	reduce((prev, x, idx, arr) => {
		${2}
	},${1:{}})
snippet filter
	filter((x, idx, arr) => {
		${2}
	})
# test
snippet test
	test("${1}", function() {
		${2}
	});
# debugger
snippet de
	debugger;
# console.log
snippet cons
	console.log(${1})
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1}) {
		${2}
	}
# else
snippet else
	else {
		${1}
	}
# if ... else
snippet ife
	if (${1}) {
		${2}
	}
	else{
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for in 
snippet forin
	for (var prop in ${1}) {
		${3}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet while
	while (${1}) {
		${2}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# Vue typescript specific
snippet comp
	@Component({
		${1}
	})
snippet imp
	import { ${1} } from '${2}';
snippet vue
	class ${1} extends Vue {
		${2}
	}
snippet impav
	import { Component, Data, Lifecycle, p, Prop } from 'av-ts';
snippet prop
	@Prop
	${1:foo}: ${2:string} = p<$2>({
		required: true
	});
snippet life
	@Lifecycle
	${1:created}(): void {
		${2}
	}
snippet data
	@Data
	data(): Object {
	  return {
			${1}
	  };
	}
snippet temp
	template: require('./${1}.pug')()
snippet req
	require('${1}');
snippet svg
	const ${1:foo}: string = require('./${2:foo}.svg');
